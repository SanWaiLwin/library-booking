version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: booking-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: booking_system
      MYSQL_USER: booking_user
      MYSQL_PASSWORD: booking_pass
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./src/main/resources/db:/docker-entrypoint-initdb.d
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: booking-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: booking-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/booking_system
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_TIMEOUT: 2000ms
      REDIS_DATABASE: 0
      
      # Cache Configuration
      CACHE_AVAILABLE_BOOKS_TTL: 300
      CACHE_BORROWED_BOOKS_TTL: 600
      CACHE_BOOK_DETAIL_TTL: 1800
      CACHE_KEY_PREFIX: "booking:book"
      CACHE_REFRESH_ENABLED: true
      
      # JWT Configuration
      JWT_SECRET: JWTSuperSecretKey
      JWT_EXPIRATION: 2
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker
      
      # Logging
      SPRING_SECURITY_LOG_LEVEL: WARN
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  booking-network:
    driver: bridge